# Setup:
# 1. install delta:
#   "brew install git-delta"
#   https://github.com/dandavison/delta

[user]
	name = jeremyisatrecharm
	email = jeremy@recharm.com

[interactive]
  diffFilter = delta --color-only --dark
[delta]
  syntax-theme = ansi
  navigate = true

[core]
  editor = vim
  autocrlf = input
	precomposeunicode = true
  excludesfile = /Users/jeremy_smith/.gitignore_global
	sparseCheckout = true
  pager = delta --dark
	ignorecase = false

  [pager]
	diff = "GIT_PAGER"
  branch = ""

[rerere]
	enabled = true

[push]
	default = current

[alias]
  st = status -sb
  ci = commit
  cm = commit
  br = branch
  co = checkout
  df = diff
  dw = diff --word-diff=color
  dc = diff --cached
  dwc = diff --cached --word-diff=color
  lg = log --color --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)<%an>%Creset %Cgreen(%cr) %C(yellow)%d%Creset %s %Cred(%ai) ' --abbrev-commit --
  lgf = log --follow
  logf = log --follow
  logp = log -p
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  lola2 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) %C(bold yellow)%d%C(reset) - %C(bold green)(%ar)%C(reset) %C(bold white)%an%C(reset) %C(bold red)%s%C(reset) ' --all
  ls = ls-files
  diff2 = diff --cached
  discard = checkout --
  unstage = reset HEAD
  dt = difftool
  ready = rebase -i @{u}
  standup = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cD) %C(bold blue)<%an>%Creset' --since yesterday
  purr = pull --rebase
  sf = show --pretty="format:" --name-only
  sh = show
  mine = log --author='jeremy.smith' -n 5
  files = diff-tree --no-commit-id --name-only -r
  prune-local = "!git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D"
  tr-co = '!f() { git fetch && git checkout -b "$1" --track origin/"$1"; }; f'
	trco = "!f() { git fetch && git checkout -b \"$1\" --track origin/\"$1\"; }; f"
	newb = checkout -b
	aliaslist = config --get-regexp '^alias\\.'




[color]
  ui = auto
  diff = auto
  status = auto
  branch = auto
  interactive = auto

[color "diff"]
  meta = yellow bold
  frag = white bold
  new = green bold
  old = red bold
  plain = white

[diff]
  tool = Kaleidoscope
  algorithm = patience
  colorMoved = default
  #external = diffmerge \"$LOCAL\" \"$REMOTE\"

  # use meld (note: git-meld is a bash script on path)
  #external = git-meld
  #
  # use p4merge:
  #tool = p4merge
  #external = /Applications/p4merge.app/Contents/MacOS/p4merge "$2" "$5" ||

  # use opendiff, which sucks
  #tool = opendiff
  #external = /Developer/usr/bin/opendiff "$2" "$5" ||

  #external = "echo"
  #external = "/Applications/DeltaWalker.app/Contents/MacOS/git-diff"


[difftool]
  prompt = false

[difftool "opendiff"]
  path = /Developer/usr/bin/opendiff

[mergetool "opendiff"]
  path = /Developer/usr/bin/opendiff
  trustExitCode = true

[difftool "p4merge"]
  path = /Applications/p4merge.app/Contents/MacOS/p4merge

[merge]
  #tool = diffmerge
  tool = Kaleidoscope
  conflictstyle = diff3

[mergetool]
  prompt = false
  keepBackup = true

[mergetool "p4merge"]
  path = /Applications/p4merge.app/Contents/MacOS/p4merge
  trustExitCode = false

[mergetool "diffmerge"]
  cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
  trustExitCode = false

[difftool "diffmerge"]
  cmd = diffmerge \"$LOCAL\" \"$REMOTE\"

[mergetool "deltawalker"]
  cmd = '/Applications/DeltaWalker.app/Contents/MacOS/git-merge' "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

[include]
  path = .gitcredentials

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true
[pager]
	diff = less -+F -X
	log = less -+F -X
	show = less -+F -X

[credential]
	helper = !aws codecommit credential-helper $@

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
